#include <ruby.h>

static VALUE
hacks_rb_intern_str(VALUE mod, VALUE x)
{
    return rb_intern_str(x);
}

static VALUE
hacks_rb_gc_writebarrier(VALUE mod, VALUE x, VALUE y)
{
    rb_gc_writebarrier(x, y);
    return Qtrue;
}

static VALUE
hacks_rb_obj_class(VALUE mod, VALUE x)
{
    return rb_obj_class(x);
}

static VALUE
hacks_rb_type(VALUE mod, VALUE x)
{
    return INT2NUM(rb_type(x));
}

static VALUE
hacks_rb_id2sym(VALUE mod, VALUE x)
{
    return rb_id2sym((ID)NUM2INT(x));
}

void Init_hacks(void)
{
    VALUE rb_mHacks = rb_define_module("Hacks");
<%- constants.each do |ruby_name, c_name| -%>
    rb_define_const(rb_mHacks, "<%= ruby_name %>", INT2NUM(<%= c_name %>));
<%- end -%>

    VALUE offsets = rb_hash_new();
    VALUE tmp;
    VALUE tmp2;
<%- structs.each do |struct_name, members| -%>
    tmp = rb_hash_new();
  <%- members.each do |member_name| -%>
    tmp2 = rb_ary_new();
    // Offset
    rb_ary_store(tmp2, 0, INT2NUM(offsetof(struct <%= struct_name %>, <%= member_name %>)));
    // Size
    rb_ary_store(tmp2, 1, INT2NUM(sizeof(((struct <%= struct_name %> *)0)-><%= member_name %>)));
    rb_hash_aset(tmp, rb_str_new2("<%= member_name %>"), tmp2);
  <%- end -%>
    rb_hash_aset(offsets, rb_str_new2("<%= struct_name %>"), tmp);
<%- end -%>
    rb_define_const(rb_mHacks, "STRUCTS", offsets);

    rb_define_singleton_method(rb_mHacks, "rb_type", hacks_rb_type, 1);
    rb_define_singleton_method(rb_mHacks, "rb_id2sym", hacks_rb_id2sym, 1);
    rb_define_singleton_method(rb_mHacks, "rb_obj_class", hacks_rb_obj_class, 1);
    rb_define_singleton_method(rb_mHacks, "rb_gc_writebarrier", hacks_rb_gc_writebarrier, 2);
    rb_define_singleton_method(rb_mHacks, "rb_intern_str", hacks_rb_intern_str, 1);
}
